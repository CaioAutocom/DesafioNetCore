// <auto-generated />
using System;
using DesafioNetCore.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DesafioNetCore.Infra.Migrations.Identity
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20231215205839_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DesafioNetCore.Domain.Entities.Person", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AlternativeIdentifier")
                        .HasColumnType("text")
                        .HasColumnName("alternativeidentifier");

                    b.Property<bool>("CanBuy")
                        .HasColumnType("boolean")
                        .HasColumnName("canbuy");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<bool>("Enable")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Observations")
                        .HasColumnType("text")
                        .HasColumnName("observations");

                    b.Property<string>("Town")
                        .HasColumnType("text")
                        .HasColumnName("town");

                    b.HasKey("Id");

                    b.ToTable("person", "public");
                });

            modelBuilder.Entity("DesafioNetCore.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Acronym")
                        .HasColumnType("text")
                        .HasColumnName("unit");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("BarCode")
                        .HasColumnType("text")
                        .HasColumnName("barcode");

                    b.Property<bool>("CanSell")
                        .HasColumnType("boolean")
                        .HasColumnName("cansell");

                    b.Property<string>("FullDescription")
                        .HasColumnType("text")
                        .HasColumnName("shortdescription");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text")
                        .HasColumnName("fulldescription");

                    b.Property<decimal>("Storage")
                        .HasColumnType("numeric")
                        .HasColumnName("storage");

                    b.Property<Guid?>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("product", "public");
                });

            modelBuilder.Entity("DesafioNetCore.Domain.Entities.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Acronym")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Unit", "public");
                });

            modelBuilder.Entity("DesafioNetCore.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessPriority")
                        .HasColumnType("integer")
                        .HasColumnName("accesspriority");

                    b.Property<string>("Document")
                        .HasColumnType("text")
                        .HasColumnName("document");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Nickname")
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("user", "public");
                });

            modelBuilder.Entity("DesafioNetCore.Domain.Entities.Product", b =>
                {
                    b.HasOne("DesafioNetCore.Domain.Entities.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("DesafioNetCore.Domain.Entities.Unit", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
